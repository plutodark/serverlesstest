{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,iBAAiB,mBAAO,CAAC,sCAAgB;AACzC,qBAAqB,mBAAO,CAAC,gEAA6B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA","sources":["webpack:///external commonjs \"@apollo/server\"","webpack:///external commonjs \"@as-integrations/aws-lambda\"","webpack:///webpack/bootstrap","webpack:///./index.ts"],"sourcesContent":["module.exports = require(\"@apollo/server\");","module.exports = require(\"@as-integrations/aws-lambda\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.graphqlHandler = void 0;\nconst server_1 = require(\"@apollo/server\");\nconst aws_lambda_1 = require(\"@as-integrations/aws-lambda\");\nconst typeDefs = `\n  type Query {\n    hello: String\n  }\n`;\nconst resolvers = {\n    Query: {\n        hello: () => {\n            console.log('try try');\n            return 'meow';\n        }\n    }\n};\nconst server = new server_1.ApolloServer({\n    typeDefs,\n    resolvers,\n    introspection: false\n});\nexports.graphqlHandler = (0, aws_lambda_1.startServerAndCreateLambdaHandler)(server, \n// We will be using the Proxy V2 handler\naws_lambda_1.handlers.createAPIGatewayProxyEventV2RequestHandler());\n/*\nmodule.exports.handler = async (event: Event) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\n      {\n        message: 'Go Serverless v3.0! Your function executed successfully!',\n        input: event,\n      },\n      null,\n      2\n    ),\n  };\n};\n\n*/\n"],"names":[],"sourceRoot":""}